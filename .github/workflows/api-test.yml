permissions:
  contents: read
  pages: write
  id-token: write

name: API Tests (Docker + Newman + Allure)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      # simple flag para ejecutar deploy aunque los tests fallen,
      # puedes quitarlo si prefieres cortar en fallos.
      always_run: ${{ steps.always.outputs.run }}
    steps:
      - uses: actions/checkout@v4

      # 1) Build imágenes
      - name: Build images
        run: docker compose build

      # 2) Levantar app + mongo
      - name: Start app stack (mongo + app)
        run: docker compose up -d mongo app

      # 3) Ejecutar Newman
      - name: Run Newman tests
        run: docker compose up --exit-code-from tests tests

      # 4) Subir allure-results como artefacto (útil para debug)
      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results

      # 5) Preparar directorios para el HTML
      - name: Prepare report dirs
        if: always()
        run: |
          mkdir -p allure-results
          mkdir -p allure-report

      # 6) Generar HTML de Allure
      - name: Generate Allure HTML
        if: always()
        run: |
          docker run --rm \
            -u 0 \
            -v "$PWD/allure-results:/allure-results:ro" \
            -v "$PWD/allure-report:/allure-report" \
            frankescobar/allure-docker-service \
            /bin/sh -lc "allure generate /allure-results --clean -o /allure-report"

      # 7) Subir HTML como artefacto (descargable)
      - name: Upload Allure HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      # 8) Empaquetar para Pages
      - name: Upload Pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report

      # flag para permitir job 'deploy' siempre
      - id: always
        if: always()
        run: echo "run=true" >> "$GITHUB_OUTPUT"

  deploy:
    needs: test
    if: always()  # publica aunque el job test falle (si no quieres, quita esta línea)
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
