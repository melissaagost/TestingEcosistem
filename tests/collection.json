{
	"info": {
		"_postman_id": "8f805bb4-3601-4804-a0f7-13ad9a25e967",
		"name": "Book API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48184790"
	},
	"item": [
		{
			"name": "GET books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK\", () => pm.response.code === 200);\r",
							"pm.test(\"Respuesta es un arreglo JSON\", () => Array.isArray(pm.response.json()));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Create Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const a = pm.response.json();\r",
							"pm.test(\"Creación de autor 201/200\", () => [200,201].includes(pm.response.code));\r",
							"pm.test(\"Autor tiene id\", () => a && (a._id || a.id));\r",
							"pm.environment.set(\"authorId\", a._id || a.id);\r",
							"const runId = pm.collectionVariables.get(\"runId\");\r",
							"pm.test(\"Nombre incluye runId\", () => pm.response.json().name.includes(runId));\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Author {{runId}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/author",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"author"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Create Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Creación 200/201\", () => pm.expect([200,201]).to.include(pm.response.code));\r",
							"\r",
							"const isJson = pm.response.headers.get(\"Content-Type\")?.includes(\"application/json\");\r",
							"const bodyText = pm.response.text();\r",
							"const hasBody = bodyText && bodyText.length > 0;\r",
							"\r",
							"pm.test(\"Respuesta con JSON\", () => pm.expect(isJson && hasBody).to.be.true);\r",
							"\r",
							"if (isJson && hasBody) {\r",
							"  const b = pm.response.json();\r",
							"\r",
							"  pm.test(\"Tiene id\", () => pm.expect(b && (b._id || b.id)).to.be.ok);\r",
							"\r",
							"  // Guardar id para el resto de la suite\r",
							"  pm.environment.set(\"bookId\", b._id || b.id);\r",
							"\r",
							"  // Validar que se usó el runId\r",
							"  const runId = pm.collectionVariables.get(\"runId\");\r",
							"  pm.test(\"Título incluye runId\", () => pm.expect(String(b.title)).to.include(runId));\r",
							"\r",
							"  // (Opcional) Schema mínimo\r",
							"  pm.test(\"Schema básico\", () => {\r",
							"    const schema = {\r",
							"      type: \"object\",\r",
							"      required: [\"title\",\"publisher\",\"pageCount\"],\r",
							"      properties: {\r",
							"        title: { type: \"string\" },\r",
							"        publisher: { type: \"string\" },\r",
							"        pageCount: { type: [\"number\",\"integer\",\"string\"] }\r",
							"      }\r",
							"    };\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"  });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Usamos el runId global\r",
							"const runId = pm.collectionVariables.get(\"runId\");\r",
							"\r",
							"// Datos únicos para este libro\r",
							"// Nota: {{$uuid}} se resuelve en runtime cuando lo usás dentro de strings con replaceIn\r",
							"const uuid = pm.variables.replaceIn('{{$uuid}}');\r",
							"\r",
							"pm.variables.set(\"bookTitle\", `Book-${runId}-${uuid}`);\r",
							"pm.variables.set(\"publisher\", `Pub-${runId}`);\r",
							"pm.variables.set(\"pages\", 100 + Math.floor(Math.random() * 400));\r",
							"\r",
							"// Validación: necesitamos authorId seteado por el request \"POST Create Author\"\r",
							"if (!pm.environment.get(\"authorId\")) {\r",
							"  // Opción A (recomendada en CI): fallar explícito para que te avise\r",
							"  throw new Error(\"Falta authorId. Corré primero 'POST Create Author'.\");\r",
							"\r",
							"  // Opción B (automatizar): crear el autor on-the-fly\r",
							"  /*\r",
							"  pm.sendRequest({\r",
							"    url: pm.variables.get(\"baseUrl\") + \"/author\",\r",
							"    method: \"POST\",\r",
							"    header: { \"Content-Type\": \"application/json\" },\r",
							"    body: { mode: \"raw\", raw: JSON.stringify({ name: `Author ${runId}` }) }\r",
							"  }, (err, res) => {\r",
							"    if (err || ![200,201].includes(res.code)) {\r",
							"      throw new Error(\"No se pudo crear el autor automáticamente.\");\r",
							"    }\r",
							"    const a = res.json();\r",
							"    pm.environment.set(\"authorId\", a._id || a.id);\r",
							"  });\r",
							"  */\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"{{bookTitle}}\",\r\n  \"author\": \"{{authorId}}\",\r\n  \"publisher\": \"{{publisher}}\",\r\n  \"pageCount\": {{pages}}\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Author by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const isJson = pm.response.headers.get('Content-Type')?.includes('application/json');\r",
							"const hasBody = pm.response.text().length > 0;\r",
							"if (isJson && hasBody) {\r",
							"  const data = pm.response.json();\r",
							"\r",
							"    pm.test(\"200 OK\", () => pm.response.code === 200);\r",
							"    const a = pm.response.json();\r",
							"    pm.test(\"Tiene id\", () => a && (a._id || a.id));\r",
							"    pm.test(\"Tiene name\", () => a && a.name);\r",
							"\r",
							"\r",
							"} else {\r",
							"  pm.test(\"Sin body (204 o error manejado)\", () => [204,404].includes(pm.response.code));\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/author/{{authorId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"author",
						"{{authorId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK\", () => pm.response.code === 200);\r",
							"pm.test(\"Respuesta es un arreglo JSON\", () => Array.isArray(pm.response.json()));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/author",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"author"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const isJson = pm.response.headers.get('Content-Type')?.includes('application/json');\r",
							"const hasBody = pm.response.text().length > 0;\r",
							"if (isJson && hasBody) {\r",
							"  const a = pm.response.json();\r",
							"  pm.test(\"200/204 OK\", () => [200,204].includes(pm.response.code));\r",
							"  pm.test(\"Nombre actualizado\", () => a && a.name && a.name.includes(\"(updated)\"));\r",
							"} else {\r",
							"  pm.test(\"Sin body (204 o error manejado)\", () => [204,404].includes(pm.response.code));\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"name\": \"Author {{runId}} (updated)\" }\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/author/{{authorId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"author",
						"{{authorId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Borrado 200/204\", () => [200,204].includes(pm.response.code));\r",
							"pm.environment.unset(\"authorId\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/author/{{authorId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"author",
						"{{authorId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Author Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 Not Found\", () => pm.response.code === 404);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/author/{{authorId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"author",
						"{{authorId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Book by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const isJson = pm.response.headers.get('Content-Type')?.includes('application/json');\r",
							"const hasBody = pm.response.text().length > 0;\r",
							"if (isJson && hasBody) {\r",
							"  const b = pm.response.json();\r",
							"  pm.test(\"200 OK\", () => pm.response.code === 200);\r",
							"  pm.test(\"Tiene título\", () => b && b.title);\r",
							"  pm.test(\"Título incluye runId\", () => b.title.includes(pm.collectionVariables.get(\"runId\")));\r",
							"} else {\r",
							"  pm.test(\"Sin body (204 o error manejado)\", () => [204,404].includes(pm.response.code));\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books/{{bookId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const isJson = pm.response.headers.get('Content-Type')?.includes('application/json');\r",
							"const hasBody = pm.response.text().length > 0;\r",
							"if (isJson && hasBody) {\r",
							"  const b = pm.response.json();\r",
							"  pm.test(\"200/204 OK\", () => [200,204].includes(pm.response.code));\r",
							"  pm.test(\"pageCount actualizado\", () => b && (+b.pageCount === 300));\r",
							"} else {\r",
							"  pm.test(\"Sin body (204 o error manejado)\", () => [204,404].includes(pm.response.code));\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"pageCount\": 300 }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books/{{bookId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Borrado 200/204\", () => [200,204].includes(pm.response.code));\r",
							"pm.environment.unset(\"bookId\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books/{{bookId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Book Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No existe (404 o similar)\", () => [404,400].includes(pm.response.code));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books/{{bookId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Si no existe todavía, creamos un runId único por suite\r",
					"if (!pm.collectionVariables.get(\"runId\")) {\r",
					"    const runId = \"run_\" + Date.now();\r",
					"    pm.collectionVariables.set(\"runId\", runId);\r",
					"    console.log(\"Nuevo runId:\", runId);\r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}